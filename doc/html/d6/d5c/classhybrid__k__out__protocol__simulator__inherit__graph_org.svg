<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 5.0.0 (0)
 -->
<!-- Title: hybrid_k_out_protocol_simulator Pages: 1 -->
<svg width="596pt" height="1525pt"
 viewBox="0.00 0.00 596.00 1525.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1521)">
<title>hybrid_k_out_protocol_simulator</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-1521 592,-1521 592,4 -4,4"/>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title=" ">
<polygon fill="#bfbfbf" stroke="black" points="133,-0.5 133,-180.5 434,-180.5 434,-0.5 133,-0.5"/>
<text text-anchor="middle" x="283.5" y="-166.9" font-family="Helvetica,sans-Serif" font-size="12.00">hybrid_k_out_protocol_simulator</text>
<polyline fill="none" stroke="black" points="133,-159.5 434,-159.5 "/>
<text text-anchor="middle" x="283.5" y="-145.9" font-family="Helvetica,sans-Serif" font-size="12.00"> </text>
<polyline fill="none" stroke="black" points="133,-138.5 434,-138.5 "/>
<text text-anchor="start" x="141" y="-124.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ hybrid_k_out_protocol_simulator</text>
<text text-anchor="start" x="141" y="-111.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="141" y="-98.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_targets, std::function&lt; size</text>
<text text-anchor="start" x="141" y="-85.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t(party_t)&gt; imitation_function, std</text>
<text text-anchor="start" x="141" y="-72.9" font-family="Helvetica,sans-Serif" font-size="12.00">::function&lt; size_t(party_t)&gt; get_nr_requests,</text>
<text text-anchor="start" x="141" y="-59.9" font-family="Helvetica,sans-Serif" font-size="12.00"> std::function&lt; size_t(party_t)&gt; get_nr_requests</text>
<text text-anchor="start" x="141" y="-46.9" font-family="Helvetica,sans-Serif" font-size="12.00">_to_handle, std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="141" y="-33.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~hybrid_k_out_protocol_simulator()</text>
<text text-anchor="start" x="141" y="-20.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="141" y="-7.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round() override</text>
</a>
</g>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:href="../../d2/d21/classreceiver__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="19,-250 19,-508 274,-508 274,-250 19,-250"/>
<text text-anchor="middle" x="146.5" y="-494.4" font-family="Helvetica,sans-Serif" font-size="12.00">receiver_protocol_simulator</text>
<polyline fill="none" stroke="black" points="19,-487 274,-487 "/>
<text text-anchor="start" x="27" y="-473.4" font-family="Helvetica,sans-Serif" font-size="12.00"># std::mt19937_64 * re</text>
<text text-anchor="start" x="27" y="-460.4" font-family="Helvetica,sans-Serif" font-size="12.00"># std::uniform_int_distribution&lt; party</text>
<text text-anchor="start" x="27" y="-447.4" font-family="Helvetica,sans-Serif" font-size="12.00">_t &gt; unif_coin</text>
<text text-anchor="start" x="27" y="-434.4" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="27" y="-421.4" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_requests</text>
<text text-anchor="start" x="27" y="-408.4" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="27" y="-395.4" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_requests_to_handle</text>
<polyline fill="none" stroke="black" points="19,-388 274,-388 "/>
<text text-anchor="start" x="27" y="-374.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ receiver_protocol_simulator(std</text>
<text text-anchor="start" x="27" y="-361.4" font-family="Helvetica,sans-Serif" font-size="12.00">::function&lt; size_t(party_t)&gt; get</text>
<text text-anchor="start" x="27" y="-348.4" font-family="Helvetica,sans-Serif" font-size="12.00">_nr_requests, std::function&lt; size</text>
<text text-anchor="start" x="27" y="-335.4" font-family="Helvetica,sans-Serif" font-size="12.00">_t(party_t)&gt; get_nr_requests_to_handle,</text>
<text text-anchor="start" x="27" y="-322.4" font-family="Helvetica,sans-Serif" font-size="12.00"> std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="27" y="-309.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~receiver_protocol_simulator()</text>
<text text-anchor="start" x="27" y="-296.4" font-family="Helvetica,sans-Serif" font-size="12.00"># party_t request(party_t requester)</text>
<text text-anchor="start" x="27" y="-283.4" font-family="Helvetica,sans-Serif" font-size="12.00"># counter_t handle_requests(party_t i)</text>
<text text-anchor="start" x="27" y="-270.4" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; party_t &gt; get_request</text>
<text text-anchor="start" x="27" y="-257.4" font-family="Helvetica,sans-Serif" font-size="12.00">_targets(party_t requester)</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node1 -->
<g id="edge1" class="edge">
<title>Node2&#45;&gt;Node1</title>
<path fill="none" stroke="midnightblue" d="M212.12,-240.77C221.91,-220.3 231.77,-199.68 240.91,-180.56"/>
<polygon fill="none" stroke="midnightblue" points="208.94,-239.3 207.79,-249.83 215.26,-242.32 208.94,-239.3"/>
</g>
<!-- Node3 -->
<g id="node3" class="node">
<title>Node3</title>
<g id="a_node3"><a xlink:href="../../d6/d8a/classabstract__receive__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="0,-584 0,-803 265,-803 265,-584 0,-584"/>
<text text-anchor="middle" x="132.5" y="-789.4" font-family="Helvetica,sans-Serif" font-size="12.00">abstract_receive_protocol_simulator</text>
<polyline fill="none" stroke="black" points="0,-782 265,-782 "/>
<text text-anchor="start" x="8" y="-768.4" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; std::vector&lt; party</text>
<text text-anchor="start" x="8" y="-755.4" font-family="Helvetica,sans-Serif" font-size="12.00">_t &gt; &gt; requesters</text>
<polyline fill="none" stroke="black" points="0,-748 265,-748 "/>
<text text-anchor="start" x="8" y="-734.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ abstract_receive_protocol_simulator</text>
<text text-anchor="start" x="8" y="-721.4" font-family="Helvetica,sans-Serif" font-size="12.00">(std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="8" y="-708.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~abstract_receive_protocol_simulator()</text>
<text text-anchor="start" x="8" y="-695.4" font-family="Helvetica,sans-Serif" font-size="12.00"># counter_t handle_all_requests()</text>
<text text-anchor="start" x="8" y="-682.4" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual counter_t handle_requests</text>
<text text-anchor="start" x="8" y="-669.4" font-family="Helvetica,sans-Serif" font-size="12.00">(party_t i)=0</text>
<text text-anchor="start" x="8" y="-656.4" font-family="Helvetica,sans-Serif" font-size="12.00"># counter_t request(party_t requester)</text>
<text text-anchor="start" x="8" y="-643.4" font-family="Helvetica,sans-Serif" font-size="12.00"># counter_t make_requests()</text>
<text text-anchor="start" x="8" y="-630.4" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::vector&lt; party_t &gt; get</text>
<text text-anchor="start" x="8" y="-617.4" font-family="Helvetica,sans-Serif" font-size="12.00">_request_targets(party_t requester)=0</text>
<text text-anchor="start" x="8" y="-604.4" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="8" y="-591.4" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round() override</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node2 -->
<g id="edge2" class="edge">
<title>Node3&#45;&gt;Node2</title>
<path fill="none" stroke="midnightblue" d="M137.83,-573.55C138.79,-552.13 139.79,-529.72 140.76,-508.05"/>
<polygon fill="none" stroke="midnightblue" points="134.33,-573.49 137.38,-583.64 141.32,-573.81 134.33,-573.49"/>
</g>
<!-- Node4 -->
<g id="node4" class="node">
<title>Node4</title>
<g id="a_node4"><a xlink:href="../../df/dcc/classcorruptions__stake__protocol__simulator.html" target="_top" xlink:title="Abstract class for protocol simulators with stake and corruptions.">
<polygon fill="white" stroke="black" points="141.5,-846.5 141.5,-1169.5 425.5,-1169.5 425.5,-846.5 141.5,-846.5"/>
<text text-anchor="middle" x="283.5" y="-1155.9" font-family="Helvetica,sans-Serif" font-size="12.00">corruptions_stake_protocol_simulator</text>
<polyline fill="none" stroke="black" points="141.5,-1148.5 425.5,-1148.5 "/>
<text text-anchor="start" x="149.5" y="-1134.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; stake_t &gt; stakes</text>
<text text-anchor="start" x="149.5" y="-1121.9" font-family="Helvetica,sans-Serif" font-size="12.00"># stake_t total_stake</text>
<text text-anchor="start" x="149.5" y="-1108.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; corruption_t &gt; corrupted</text>
<polyline fill="none" stroke="black" points="141.5,-1101.5 425.5,-1101.5 "/>
<text text-anchor="start" x="149.5" y="-1087.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ corruptions_stake_protocol_simulator</text>
<text text-anchor="start" x="149.5" y="-1074.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="149.5" y="-1061.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~corruptions_stake_protocol</text>
<text text-anchor="start" x="149.5" y="-1048.9" font-family="Helvetica,sans-Serif" font-size="12.00">_simulator()</text>
<text text-anchor="start" x="149.5" y="-1035.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; stake_t &gt; get_stakes()</text>
<text text-anchor="start" x="149.5" y="-1022.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ stake_t get_total_stake()</text>
<text text-anchor="start" x="149.5" y="-1009.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; corruption_t &gt; get</text>
<text text-anchor="start" x="149.5" y="-996.9" font-family="Helvetica,sans-Serif" font-size="12.00">_corrupted()</text>
<text text-anchor="start" x="149.5" y="-983.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ corruption_t is_corrupted(party_t i)</text>
<text text-anchor="start" x="149.5" y="-970.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void corrupt_parties(std::vector</text>
<text text-anchor="start" x="149.5" y="-957.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; corruption_t &gt; corrupted)</text>
<text text-anchor="start" x="149.5" y="-944.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual round_t get_latency()</text>
<text text-anchor="start" x="149.5" y="-931.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool all_got_msg()</text>
<text text-anchor="start" x="149.5" y="-918.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual void adversary(party_t i,</text>
<text text-anchor="start" x="149.5" y="-905.9" font-family="Helvetica,sans-Serif" font-size="12.00"> adversary_phase phase)</text>
<text text-anchor="start" x="149.5" y="-892.9" font-family="Helvetica,sans-Serif" font-size="12.00"># party_t owner_of(stake_t c)</text>
<text text-anchor="start" x="149.5" y="-879.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool &gt; round()</text>
<text text-anchor="start" x="149.5" y="-866.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="149.5" y="-853.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round()=0</text>
</a>
</g>
</g>
<!-- Node4&#45;&gt;Node3 -->
<g id="edge3" class="edge">
<title>Node4&#45;&gt;Node3</title>
<path fill="none" stroke="midnightblue" d="M201.36,-837C195.84,-825.59 190.38,-814.28 185.08,-803.31"/>
<polygon fill="none" stroke="midnightblue" points="198.29,-838.69 205.79,-846.17 204.59,-835.65 198.29,-838.69"/>
</g>
<!-- Node7 -->
<g id="node7" class="node">
<title>Node7</title>
<g id="a_node7"><a xlink:href="../../da/d2c/classabstract__send__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="283,-577.5 283,-809.5 588,-809.5 588,-577.5 283,-577.5"/>
<text text-anchor="middle" x="435.5" y="-795.9" font-family="Helvetica,sans-Serif" font-size="12.00">abstract_send_protocol_simulator</text>
<polyline fill="none" stroke="black" points="283,-788.5 588,-788.5 "/>
<text text-anchor="start" x="291" y="-774.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::queue&lt; party_t &gt; to_send</text>
<text text-anchor="start" x="291" y="-761.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; bool(bool, party</text>
<text text-anchor="start" x="291" y="-748.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t, party_t)&gt; forward</text>
<polyline fill="none" stroke="black" points="283,-741.5 588,-741.5 "/>
<text text-anchor="start" x="291" y="-727.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ abstract_send_protocol_simulator</text>
<text text-anchor="start" x="291" y="-714.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::vector&lt; stake_t &gt; stakes, std</text>
<text text-anchor="start" x="291" y="-701.9" font-family="Helvetica,sans-Serif" font-size="12.00">::function&lt; bool(bool, party_t, party</text>
<text text-anchor="start" x="291" y="-688.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t)&gt; forward=[](bool first_time, party</text>
<text text-anchor="start" x="291" y="-675.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t sender, party_t receiver) { return first_time;})</text>
<text text-anchor="start" x="291" y="-662.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~abstract_send_protocol_simulator()</text>
<text text-anchor="start" x="291" y="-649.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual void set_sender(party_t</text>
<text text-anchor="start" x="291" y="-636.9" font-family="Helvetica,sans-Serif" font-size="12.00"> sender) override</text>
<text text-anchor="start" x="291" y="-623.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::vector&lt; party_t &gt; get</text>
<text text-anchor="start" x="291" y="-610.9" font-family="Helvetica,sans-Serif" font-size="12.00">_targets_to_send(party_t sender)=0</text>
<text text-anchor="start" x="291" y="-597.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="291" y="-584.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round() override</text>
</a>
</g>
</g>
<!-- Node4&#45;&gt;Node7 -->
<g id="edge7" class="edge">
<title>Node4&#45;&gt;Node7</title>
<path fill="none" stroke="midnightblue" d="M366.19,-836.99C370.65,-827.82 375.08,-818.71 379.42,-809.8"/>
<polygon fill="none" stroke="midnightblue" points="362.95,-835.65 361.73,-846.17 369.25,-838.71 362.95,-835.65"/>
</g>
<!-- Node5 -->
<g id="node5" class="node">
<title>Node5</title>
<g id="a_node5"><a xlink:href="../../da/d73/classprotocol__simulator.html" target="_top" xlink:title="Abstract class for protocol simulators.">
<polygon fill="white" stroke="black" points="150.5,-1206.5 150.5,-1516.5 416.5,-1516.5 416.5,-1206.5 150.5,-1206.5"/>
<text text-anchor="middle" x="283.5" y="-1502.9" font-family="Helvetica,sans-Serif" font-size="12.00">protocol_simulator</text>
<polyline fill="none" stroke="black" points="150.5,-1495.5 416.5,-1495.5 "/>
<text text-anchor="start" x="158.5" y="-1481.9" font-family="Helvetica,sans-Serif" font-size="12.00"># party_t nr_parties</text>
<text text-anchor="start" x="158.5" y="-1468.9" font-family="Helvetica,sans-Serif" font-size="12.00"># round_t curr_round</text>
<text text-anchor="start" x="158.5" y="-1455.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; counter_t &gt; nr_messages</text>
<text text-anchor="start" x="158.5" y="-1442.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; round_t &gt; got_msg</text>
<polyline fill="none" stroke="black" points="150.5,-1435.5 416.5,-1435.5 "/>
<text text-anchor="start" x="158.5" y="-1421.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ protocol_simulator(party_t nr_parties)</text>
<text text-anchor="start" x="158.5" y="-1408.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~protocol_simulator()</text>
<text text-anchor="start" x="158.5" y="-1395.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual round_t get_latency()</text>
<text text-anchor="start" x="158.5" y="-1382.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual party_t get_nr_parties(round_t r)</text>
<text text-anchor="start" x="158.5" y="-1369.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ party_t get_nr_parties()</text>
<text text-anchor="start" x="158.5" y="-1356.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool all_got_msg()</text>
<text text-anchor="start" x="158.5" y="-1343.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; round_t &gt; get_got_msg()</text>
<text text-anchor="start" x="158.5" y="-1330.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool receive(party_t receiver)</text>
<text text-anchor="start" x="158.5" y="-1317.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool has_received(party_t receiver)</text>
<text text-anchor="start" x="158.5" y="-1304.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual void set_sender(party_t sender)</text>
<text text-anchor="start" x="158.5" y="-1291.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual std::vector&lt; counter_t &gt;</text>
<text text-anchor="start" x="158.5" y="-1278.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_messages_per_round()</text>
<text text-anchor="start" x="158.5" y="-1265.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual counter_t get_nr_messages()</text>
<text text-anchor="start" x="158.5" y="-1252.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool execute_protocol(round</text>
<text text-anchor="start" x="158.5" y="-1239.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t bound=ROUND_T_MAX)</text>
<text text-anchor="start" x="158.5" y="-1226.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="158.5" y="-1213.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; round()=0</text>
</a>
</g>
</g>
<!-- Node5&#45;&gt;Node4 -->
<g id="edge4" class="edge">
<title>Node5&#45;&gt;Node4</title>
<path fill="none" stroke="midnightblue" d="M283.5,-1196.31C283.5,-1187.43 283.5,-1178.5 283.5,-1169.62"/>
<polygon fill="none" stroke="midnightblue" points="280,-1196.33 283.5,-1206.33 287,-1196.33 280,-1196.33"/>
</g>
<!-- Node6 -->
<g id="node6" class="node">
<title>Node6</title>
<g id="a_node6"><a xlink:href="../../de/d66/classk__out__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="299,-217.5 299,-540.5 558,-540.5 558,-217.5 299,-217.5"/>
<text text-anchor="middle" x="428.5" y="-526.9" font-family="Helvetica,sans-Serif" font-size="12.00">k_out_protocol_simulator</text>
<polyline fill="none" stroke="black" points="299,-519.5 558,-519.5 "/>
<text text-anchor="start" x="307" y="-505.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::mt19937_64 * re</text>
<text text-anchor="start" x="307" y="-492.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="307" y="-479.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_targets</text>
<text text-anchor="start" x="307" y="-466.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="307" y="-453.9" font-family="Helvetica,sans-Serif" font-size="12.00"> imitation_function</text>
<text text-anchor="start" x="307" y="-440.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::list&lt; std::pair&lt; size_t, party</text>
<text text-anchor="start" x="307" y="-427.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t &gt; &gt; sample_domain</text>
<text text-anchor="start" x="307" y="-414.9" font-family="Helvetica,sans-Serif" font-size="12.00"># size_t total_imitated_nodes</text>
<text text-anchor="start" x="307" y="-401.9" font-family="Helvetica,sans-Serif" font-size="12.00"># size_t histogram_interval_size</text>
<text text-anchor="start" x="307" y="-388.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::map&lt; party_t, size_t &gt; histogram</text>
<polyline fill="none" stroke="black" points="299,-381.5 558,-381.5 "/>
<text text-anchor="start" x="307" y="-367.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ k_out_protocol_simulator(std::function</text>
<text text-anchor="start" x="307" y="-354.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; size_t(party_t)&gt; get_nr_targets, std</text>
<text text-anchor="start" x="307" y="-341.9" font-family="Helvetica,sans-Serif" font-size="12.00">::function&lt; size_t(party_t)&gt; imitation</text>
<text text-anchor="start" x="307" y="-328.9" font-family="Helvetica,sans-Serif" font-size="12.00">_function, std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="307" y="-315.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~k_out_protocol_simulator()</text>
<text text-anchor="start" x="307" y="-302.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="307" y="-289.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_get_nr_targets()</text>
<text text-anchor="start" x="307" y="-276.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="307" y="-263.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_imitation_function()</text>
<text text-anchor="start" x="307" y="-250.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool all_got_msg()</text>
<text text-anchor="start" x="307" y="-237.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; party_t &gt; get_targets</text>
<text text-anchor="start" x="307" y="-224.9" font-family="Helvetica,sans-Serif" font-size="12.00">_to_send(party_t sender)</text>
</a>
</g>
</g>
<!-- Node6&#45;&gt;Node1 -->
<g id="edge5" class="edge">
<title>Node6&#45;&gt;Node1</title>
<path fill="none" stroke="midnightblue" d="M342.52,-208.12C337.77,-198.73 333.1,-189.5 328.59,-180.6"/>
<polygon fill="none" stroke="midnightblue" points="339.46,-209.82 347.1,-217.16 345.71,-206.66 339.46,-209.82"/>
</g>
<!-- Node7&#45;&gt;Node6 -->
<g id="edge6" class="edge">
<title>Node7&#45;&gt;Node6</title>
<path fill="none" stroke="midnightblue" d="M432.69,-567.26C432.5,-558.51 432.3,-549.62 432.1,-540.71"/>
<polygon fill="none" stroke="midnightblue" points="429.2,-567.55 432.92,-577.47 436.2,-567.39 429.2,-567.55"/>
</g>
</g>
</svg>
