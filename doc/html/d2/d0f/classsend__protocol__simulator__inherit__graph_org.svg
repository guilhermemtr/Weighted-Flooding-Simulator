<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 5.0.0 (0)
 -->
<!-- Title: send_protocol_simulator Pages: 1 -->
<svg width="313pt" height="1395pt"
 viewBox="0.00 0.00 313.00 1395.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1391)">
<title>send_protocol_simulator</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-1391 309,-1391 309,4 -4,4"/>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title=" ">
<polygon fill="#bfbfbf" stroke="black" points="25.5,-204.5 25.5,-410.5 279.5,-410.5 279.5,-204.5 25.5,-204.5"/>
<text text-anchor="middle" x="152.5" y="-396.9" font-family="Helvetica,sans-Serif" font-size="12.00">send_protocol_simulator</text>
<polyline fill="none" stroke="black" points="25.5,-389.5 279.5,-389.5 "/>
<text text-anchor="start" x="33.5" y="-375.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::mt19937_64 * re</text>
<text text-anchor="start" x="33.5" y="-362.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::uniform_real_distribution&lt;</text>
<text text-anchor="start" x="33.5" y="-349.9" font-family="Helvetica,sans-Serif" font-size="12.00"> double &gt; unif</text>
<text text-anchor="start" x="33.5" y="-336.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; double(party_t, party</text>
<text text-anchor="start" x="33.5" y="-323.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t)&gt; send_prob</text>
<polyline fill="none" stroke="black" points="25.5,-316.5 279.5,-316.5 "/>
<text text-anchor="start" x="33.5" y="-302.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ send_protocol_simulator(std::function</text>
<text text-anchor="start" x="33.5" y="-289.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; double(party_t, party_t)&gt; send_prob,</text>
<text text-anchor="start" x="33.5" y="-276.9" font-family="Helvetica,sans-Serif" font-size="12.00"> std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="33.5" y="-263.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~send_protocol_simulator()</text>
<text text-anchor="start" x="33.5" y="-250.9" font-family="Helvetica,sans-Serif" font-size="12.00"># bool send(party_t sender, party</text>
<text text-anchor="start" x="33.5" y="-237.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t receiver)</text>
<text text-anchor="start" x="33.5" y="-224.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::vector&lt; party_t &gt; get</text>
<text text-anchor="start" x="33.5" y="-211.9" font-family="Helvetica,sans-Serif" font-size="12.00">_targets_to_send(party_t sender)</text>
</a>
</g>
</g>
<!-- Node5 -->
<g id="node5" class="node">
<title>Node5</title>
<g id="a_node5"><a xlink:href="../../d0/d86/classhybrid__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="7,-0.5 7,-167.5 298,-167.5 298,-0.5 7,-0.5"/>
<text text-anchor="middle" x="152.5" y="-153.9" font-family="Helvetica,sans-Serif" font-size="12.00">hybrid_protocol_simulator</text>
<polyline fill="none" stroke="black" points="7,-146.5 298,-146.5 "/>
<text text-anchor="middle" x="152.5" y="-132.9" font-family="Helvetica,sans-Serif" font-size="12.00"> </text>
<polyline fill="none" stroke="black" points="7,-125.5 298,-125.5 "/>
<text text-anchor="start" x="15" y="-111.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ hybrid_protocol_simulator(std::</text>
<text text-anchor="start" x="15" y="-98.9" font-family="Helvetica,sans-Serif" font-size="12.00">function&lt; double(party_t, party_t)</text>
<text text-anchor="start" x="15" y="-85.9" font-family="Helvetica,sans-Serif" font-size="12.00">&gt; send_prob, std::function&lt; size_t</text>
<text text-anchor="start" x="15" y="-72.9" font-family="Helvetica,sans-Serif" font-size="12.00">(party_t)&gt; get_nr_requests, std::function</text>
<text text-anchor="start" x="15" y="-59.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; size_t(party_t)&gt; get_nr_requests_to_handle,</text>
<text text-anchor="start" x="15" y="-46.9" font-family="Helvetica,sans-Serif" font-size="12.00"> std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="15" y="-33.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~hybrid_protocol_simulator()</text>
<text text-anchor="start" x="15" y="-20.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="15" y="-7.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round() override</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node5 -->
<g id="edge4" class="edge">
<title>Node1&#45;&gt;Node5</title>
<path fill="none" stroke="midnightblue" d="M152.5,-194.12C152.5,-185.2 152.5,-176.3 152.5,-167.64"/>
<polygon fill="none" stroke="midnightblue" points="149,-194.18 152.5,-204.18 156,-194.18 149,-194.18"/>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:href="../../da/d2c/classabstract__send__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="0,-447.5 0,-679.5 305,-679.5 305,-447.5 0,-447.5"/>
<text text-anchor="middle" x="152.5" y="-665.9" font-family="Helvetica,sans-Serif" font-size="12.00">abstract_send_protocol_simulator</text>
<polyline fill="none" stroke="black" points="0,-658.5 305,-658.5 "/>
<text text-anchor="start" x="8" y="-644.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::queue&lt; party_t &gt; to_send</text>
<text text-anchor="start" x="8" y="-631.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; bool(bool, party</text>
<text text-anchor="start" x="8" y="-618.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t, party_t)&gt; forward</text>
<polyline fill="none" stroke="black" points="0,-611.5 305,-611.5 "/>
<text text-anchor="start" x="8" y="-597.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ abstract_send_protocol_simulator</text>
<text text-anchor="start" x="8" y="-584.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::vector&lt; stake_t &gt; stakes, std</text>
<text text-anchor="start" x="8" y="-571.9" font-family="Helvetica,sans-Serif" font-size="12.00">::function&lt; bool(bool, party_t, party</text>
<text text-anchor="start" x="8" y="-558.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t)&gt; forward=[](bool first_time, party</text>
<text text-anchor="start" x="8" y="-545.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t sender, party_t receiver) { return first_time;})</text>
<text text-anchor="start" x="8" y="-532.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~abstract_send_protocol_simulator()</text>
<text text-anchor="start" x="8" y="-519.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual void set_sender(party_t</text>
<text text-anchor="start" x="8" y="-506.9" font-family="Helvetica,sans-Serif" font-size="12.00"> sender) override</text>
<text text-anchor="start" x="8" y="-493.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::vector&lt; party_t &gt; get</text>
<text text-anchor="start" x="8" y="-480.9" font-family="Helvetica,sans-Serif" font-size="12.00">_targets_to_send(party_t sender)=0</text>
<text text-anchor="start" x="8" y="-467.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="8" y="-454.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round() override</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node1 -->
<g id="edge1" class="edge">
<title>Node2&#45;&gt;Node1</title>
<path fill="none" stroke="midnightblue" d="M152.5,-437.35C152.5,-428.45 152.5,-419.53 152.5,-410.78"/>
<polygon fill="none" stroke="midnightblue" points="149,-437.39 152.5,-447.39 156,-437.39 149,-437.39"/>
</g>
<!-- Node3 -->
<g id="node3" class="node">
<title>Node3</title>
<g id="a_node3"><a xlink:href="../../df/dcc/classcorruptions__stake__protocol__simulator.html" target="_top" xlink:title="Abstract class for protocol simulators with stake and corruptions.">
<polygon fill="white" stroke="black" points="10.5,-716.5 10.5,-1039.5 294.5,-1039.5 294.5,-716.5 10.5,-716.5"/>
<text text-anchor="middle" x="152.5" y="-1025.9" font-family="Helvetica,sans-Serif" font-size="12.00">corruptions_stake_protocol_simulator</text>
<polyline fill="none" stroke="black" points="10.5,-1018.5 294.5,-1018.5 "/>
<text text-anchor="start" x="18.5" y="-1004.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; stake_t &gt; stakes</text>
<text text-anchor="start" x="18.5" y="-991.9" font-family="Helvetica,sans-Serif" font-size="12.00"># stake_t total_stake</text>
<text text-anchor="start" x="18.5" y="-978.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; corruption_t &gt; corrupted</text>
<polyline fill="none" stroke="black" points="10.5,-971.5 294.5,-971.5 "/>
<text text-anchor="start" x="18.5" y="-957.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ corruptions_stake_protocol_simulator</text>
<text text-anchor="start" x="18.5" y="-944.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="18.5" y="-931.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~corruptions_stake_protocol</text>
<text text-anchor="start" x="18.5" y="-918.9" font-family="Helvetica,sans-Serif" font-size="12.00">_simulator()</text>
<text text-anchor="start" x="18.5" y="-905.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; stake_t &gt; get_stakes()</text>
<text text-anchor="start" x="18.5" y="-892.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ stake_t get_total_stake()</text>
<text text-anchor="start" x="18.5" y="-879.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; corruption_t &gt; get</text>
<text text-anchor="start" x="18.5" y="-866.9" font-family="Helvetica,sans-Serif" font-size="12.00">_corrupted()</text>
<text text-anchor="start" x="18.5" y="-853.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ corruption_t is_corrupted(party_t i)</text>
<text text-anchor="start" x="18.5" y="-840.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void corrupt_parties(std::vector</text>
<text text-anchor="start" x="18.5" y="-827.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; corruption_t &gt; corrupted)</text>
<text text-anchor="start" x="18.5" y="-814.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual round_t get_latency()</text>
<text text-anchor="start" x="18.5" y="-801.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool all_got_msg()</text>
<text text-anchor="start" x="18.5" y="-788.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual void adversary(party_t i,</text>
<text text-anchor="start" x="18.5" y="-775.9" font-family="Helvetica,sans-Serif" font-size="12.00"> adversary_phase phase)</text>
<text text-anchor="start" x="18.5" y="-762.9" font-family="Helvetica,sans-Serif" font-size="12.00"># party_t owner_of(stake_t c)</text>
<text text-anchor="start" x="18.5" y="-749.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool &gt; round()</text>
<text text-anchor="start" x="18.5" y="-736.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="18.5" y="-723.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round()=0</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node2 -->
<g id="edge2" class="edge">
<title>Node3&#45;&gt;Node2</title>
<path fill="none" stroke="midnightblue" d="M152.5,-706.13C152.5,-697.25 152.5,-688.43 152.5,-679.8"/>
<polygon fill="none" stroke="midnightblue" points="149,-706.17 152.5,-716.17 156,-706.17 149,-706.17"/>
</g>
<!-- Node4 -->
<g id="node4" class="node">
<title>Node4</title>
<g id="a_node4"><a xlink:href="../../da/d73/classprotocol__simulator.html" target="_top" xlink:title="Abstract class for protocol simulators.">
<polygon fill="white" stroke="black" points="19.5,-1076.5 19.5,-1386.5 285.5,-1386.5 285.5,-1076.5 19.5,-1076.5"/>
<text text-anchor="middle" x="152.5" y="-1372.9" font-family="Helvetica,sans-Serif" font-size="12.00">protocol_simulator</text>
<polyline fill="none" stroke="black" points="19.5,-1365.5 285.5,-1365.5 "/>
<text text-anchor="start" x="27.5" y="-1351.9" font-family="Helvetica,sans-Serif" font-size="12.00"># party_t nr_parties</text>
<text text-anchor="start" x="27.5" y="-1338.9" font-family="Helvetica,sans-Serif" font-size="12.00"># round_t curr_round</text>
<text text-anchor="start" x="27.5" y="-1325.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; counter_t &gt; nr_messages</text>
<text text-anchor="start" x="27.5" y="-1312.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; round_t &gt; got_msg</text>
<polyline fill="none" stroke="black" points="19.5,-1305.5 285.5,-1305.5 "/>
<text text-anchor="start" x="27.5" y="-1291.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ protocol_simulator(party_t nr_parties)</text>
<text text-anchor="start" x="27.5" y="-1278.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~protocol_simulator()</text>
<text text-anchor="start" x="27.5" y="-1265.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual round_t get_latency()</text>
<text text-anchor="start" x="27.5" y="-1252.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual party_t get_nr_parties(round_t r)</text>
<text text-anchor="start" x="27.5" y="-1239.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ party_t get_nr_parties()</text>
<text text-anchor="start" x="27.5" y="-1226.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool all_got_msg()</text>
<text text-anchor="start" x="27.5" y="-1213.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; round_t &gt; get_got_msg()</text>
<text text-anchor="start" x="27.5" y="-1200.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool receive(party_t receiver)</text>
<text text-anchor="start" x="27.5" y="-1187.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool has_received(party_t receiver)</text>
<text text-anchor="start" x="27.5" y="-1174.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual void set_sender(party_t sender)</text>
<text text-anchor="start" x="27.5" y="-1161.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual std::vector&lt; counter_t &gt;</text>
<text text-anchor="start" x="27.5" y="-1148.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_messages_per_round()</text>
<text text-anchor="start" x="27.5" y="-1135.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual counter_t get_nr_messages()</text>
<text text-anchor="start" x="27.5" y="-1122.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool execute_protocol(round</text>
<text text-anchor="start" x="27.5" y="-1109.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t bound=ROUND_T_MAX)</text>
<text text-anchor="start" x="27.5" y="-1096.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="27.5" y="-1083.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; round()=0</text>
</a>
</g>
</g>
<!-- Node4&#45;&gt;Node3 -->
<g id="edge3" class="edge">
<title>Node4&#45;&gt;Node3</title>
<path fill="none" stroke="midnightblue" d="M152.5,-1066.31C152.5,-1057.43 152.5,-1048.5 152.5,-1039.62"/>
<polygon fill="none" stroke="midnightblue" points="149,-1066.33 152.5,-1076.33 156,-1066.33 149,-1066.33"/>
</g>
</g>
</svg>
