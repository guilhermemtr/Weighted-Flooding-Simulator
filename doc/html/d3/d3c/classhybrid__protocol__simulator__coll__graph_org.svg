<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 5.0.0 (0)
 -->
<!-- Title: hybrid_protocol_simulator Pages: 1 -->
<svg width="596pt" height="1447pt"
 viewBox="0.00 0.00 596.00 1447.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1443)">
<title>hybrid_protocol_simulator</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-1443 592,-1443 592,4 -4,4"/>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title=" ">
<polygon fill="#bfbfbf" stroke="black" points="138,-0.5 138,-167.5 429,-167.5 429,-0.5 138,-0.5"/>
<text text-anchor="middle" x="283.5" y="-153.9" font-family="Helvetica,sans-Serif" font-size="12.00">hybrid_protocol_simulator</text>
<polyline fill="none" stroke="black" points="138,-146.5 429,-146.5 "/>
<text text-anchor="middle" x="283.5" y="-132.9" font-family="Helvetica,sans-Serif" font-size="12.00"> </text>
<polyline fill="none" stroke="black" points="138,-125.5 429,-125.5 "/>
<text text-anchor="start" x="146" y="-111.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ hybrid_protocol_simulator(std::</text>
<text text-anchor="start" x="146" y="-98.9" font-family="Helvetica,sans-Serif" font-size="12.00">function&lt; double(party_t, party_t)</text>
<text text-anchor="start" x="146" y="-85.9" font-family="Helvetica,sans-Serif" font-size="12.00">&gt; send_prob, std::function&lt; size_t</text>
<text text-anchor="start" x="146" y="-72.9" font-family="Helvetica,sans-Serif" font-size="12.00">(party_t)&gt; get_nr_requests, std::function</text>
<text text-anchor="start" x="146" y="-59.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; size_t(party_t)&gt; get_nr_requests_to_handle,</text>
<text text-anchor="start" x="146" y="-46.9" font-family="Helvetica,sans-Serif" font-size="12.00"> std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="146" y="-33.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~hybrid_protocol_simulator()</text>
<text text-anchor="start" x="146" y="-20.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="146" y="-7.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round() override</text>
</a>
</g>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:href="../../d2/d21/classreceiver__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="20,-204.5 20,-462.5 275,-462.5 275,-204.5 20,-204.5"/>
<text text-anchor="middle" x="147.5" y="-448.9" font-family="Helvetica,sans-Serif" font-size="12.00">receiver_protocol_simulator</text>
<polyline fill="none" stroke="black" points="20,-441.5 275,-441.5 "/>
<text text-anchor="start" x="28" y="-427.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::mt19937_64 * re</text>
<text text-anchor="start" x="28" y="-414.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::uniform_int_distribution&lt; party</text>
<text text-anchor="start" x="28" y="-401.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t &gt; unif_coin</text>
<text text-anchor="start" x="28" y="-388.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="28" y="-375.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_requests</text>
<text text-anchor="start" x="28" y="-362.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="28" y="-349.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_requests_to_handle</text>
<polyline fill="none" stroke="black" points="20,-342.5 275,-342.5 "/>
<text text-anchor="start" x="28" y="-328.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ receiver_protocol_simulator(std</text>
<text text-anchor="start" x="28" y="-315.9" font-family="Helvetica,sans-Serif" font-size="12.00">::function&lt; size_t(party_t)&gt; get</text>
<text text-anchor="start" x="28" y="-302.9" font-family="Helvetica,sans-Serif" font-size="12.00">_nr_requests, std::function&lt; size</text>
<text text-anchor="start" x="28" y="-289.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t(party_t)&gt; get_nr_requests_to_handle,</text>
<text text-anchor="start" x="28" y="-276.9" font-family="Helvetica,sans-Serif" font-size="12.00"> std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="28" y="-263.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~receiver_protocol_simulator()</text>
<text text-anchor="start" x="28" y="-250.9" font-family="Helvetica,sans-Serif" font-size="12.00"># party_t request(party_t requester)</text>
<text text-anchor="start" x="28" y="-237.9" font-family="Helvetica,sans-Serif" font-size="12.00"># counter_t handle_requests(party_t i)</text>
<text text-anchor="start" x="28" y="-224.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; party_t &gt; get_request</text>
<text text-anchor="start" x="28" y="-211.9" font-family="Helvetica,sans-Serif" font-size="12.00">_targets(party_t requester)</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node1 -->
<g id="edge1" class="edge">
<title>Node2&#45;&gt;Node1</title>
<path fill="none" stroke="midnightblue" d="M222.71,-195.63C227.95,-186.1 233.13,-176.67 238.12,-167.58"/>
<polygon fill="none" stroke="midnightblue" points="219.64,-193.95 217.89,-204.4 225.77,-197.32 219.64,-193.95"/>
</g>
<!-- Node3 -->
<g id="node3" class="node">
<title>Node3</title>
<g id="a_node3"><a xlink:href="../../d6/d8a/classabstract__receive__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="0,-506 0,-725 265,-725 265,-506 0,-506"/>
<text text-anchor="middle" x="132.5" y="-711.4" font-family="Helvetica,sans-Serif" font-size="12.00">abstract_receive_protocol_simulator</text>
<polyline fill="none" stroke="black" points="0,-704 265,-704 "/>
<text text-anchor="start" x="8" y="-690.4" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; std::vector&lt; party</text>
<text text-anchor="start" x="8" y="-677.4" font-family="Helvetica,sans-Serif" font-size="12.00">_t &gt; &gt; requesters</text>
<polyline fill="none" stroke="black" points="0,-670 265,-670 "/>
<text text-anchor="start" x="8" y="-656.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ abstract_receive_protocol_simulator</text>
<text text-anchor="start" x="8" y="-643.4" font-family="Helvetica,sans-Serif" font-size="12.00">(std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="8" y="-630.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~abstract_receive_protocol_simulator()</text>
<text text-anchor="start" x="8" y="-617.4" font-family="Helvetica,sans-Serif" font-size="12.00"># counter_t handle_all_requests()</text>
<text text-anchor="start" x="8" y="-604.4" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual counter_t handle_requests</text>
<text text-anchor="start" x="8" y="-591.4" font-family="Helvetica,sans-Serif" font-size="12.00">(party_t i)=0</text>
<text text-anchor="start" x="8" y="-578.4" font-family="Helvetica,sans-Serif" font-size="12.00"># counter_t request(party_t requester)</text>
<text text-anchor="start" x="8" y="-565.4" font-family="Helvetica,sans-Serif" font-size="12.00"># counter_t make_requests()</text>
<text text-anchor="start" x="8" y="-552.4" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::vector&lt; party_t &gt; get</text>
<text text-anchor="start" x="8" y="-539.4" font-family="Helvetica,sans-Serif" font-size="12.00">_request_targets(party_t requester)=0</text>
<text text-anchor="start" x="8" y="-526.4" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="8" y="-513.4" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round() override</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node2 -->
<g id="edge2" class="edge">
<title>Node3&#45;&gt;Node2</title>
<path fill="none" stroke="midnightblue" d="M138.86,-495.83C139.44,-484.87 140.04,-473.73 140.63,-462.69"/>
<polygon fill="none" stroke="midnightblue" points="135.36,-495.67 138.32,-505.84 142.35,-496.05 135.36,-495.67"/>
</g>
<!-- Node4 -->
<g id="node4" class="node">
<title>Node4</title>
<g id="a_node4"><a xlink:href="../../df/dcc/classcorruptions__stake__protocol__simulator.html" target="_top" xlink:title="Abstract class for protocol simulators with stake and corruptions.">
<polygon fill="white" stroke="black" points="141.5,-768.5 141.5,-1091.5 425.5,-1091.5 425.5,-768.5 141.5,-768.5"/>
<text text-anchor="middle" x="283.5" y="-1077.9" font-family="Helvetica,sans-Serif" font-size="12.00">corruptions_stake_protocol_simulator</text>
<polyline fill="none" stroke="black" points="141.5,-1070.5 425.5,-1070.5 "/>
<text text-anchor="start" x="149.5" y="-1056.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; stake_t &gt; stakes</text>
<text text-anchor="start" x="149.5" y="-1043.9" font-family="Helvetica,sans-Serif" font-size="12.00"># stake_t total_stake</text>
<text text-anchor="start" x="149.5" y="-1030.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; corruption_t &gt; corrupted</text>
<polyline fill="none" stroke="black" points="141.5,-1023.5 425.5,-1023.5 "/>
<text text-anchor="start" x="149.5" y="-1009.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ corruptions_stake_protocol_simulator</text>
<text text-anchor="start" x="149.5" y="-996.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="149.5" y="-983.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~corruptions_stake_protocol</text>
<text text-anchor="start" x="149.5" y="-970.9" font-family="Helvetica,sans-Serif" font-size="12.00">_simulator()</text>
<text text-anchor="start" x="149.5" y="-957.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; stake_t &gt; get_stakes()</text>
<text text-anchor="start" x="149.5" y="-944.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ stake_t get_total_stake()</text>
<text text-anchor="start" x="149.5" y="-931.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; corruption_t &gt; get</text>
<text text-anchor="start" x="149.5" y="-918.9" font-family="Helvetica,sans-Serif" font-size="12.00">_corrupted()</text>
<text text-anchor="start" x="149.5" y="-905.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ corruption_t is_corrupted(party_t i)</text>
<text text-anchor="start" x="149.5" y="-892.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void corrupt_parties(std::vector</text>
<text text-anchor="start" x="149.5" y="-879.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; corruption_t &gt; corrupted)</text>
<text text-anchor="start" x="149.5" y="-866.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual round_t get_latency()</text>
<text text-anchor="start" x="149.5" y="-853.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool all_got_msg()</text>
<text text-anchor="start" x="149.5" y="-840.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual void adversary(party_t i,</text>
<text text-anchor="start" x="149.5" y="-827.9" font-family="Helvetica,sans-Serif" font-size="12.00"> adversary_phase phase)</text>
<text text-anchor="start" x="149.5" y="-814.9" font-family="Helvetica,sans-Serif" font-size="12.00"># party_t owner_of(stake_t c)</text>
<text text-anchor="start" x="149.5" y="-801.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool &gt; round()</text>
<text text-anchor="start" x="149.5" y="-788.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="149.5" y="-775.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round()=0</text>
</a>
</g>
</g>
<!-- Node4&#45;&gt;Node3 -->
<g id="edge3" class="edge">
<title>Node4&#45;&gt;Node3</title>
<path fill="none" stroke="midnightblue" d="M201.36,-759C195.84,-747.59 190.38,-736.28 185.08,-725.31"/>
<polygon fill="none" stroke="midnightblue" points="198.29,-760.69 205.79,-768.17 204.59,-757.65 198.29,-760.69"/>
</g>
<!-- Node7 -->
<g id="node7" class="node">
<title>Node7</title>
<g id="a_node7"><a xlink:href="../../da/d2c/classabstract__send__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="283,-499.5 283,-731.5 588,-731.5 588,-499.5 283,-499.5"/>
<text text-anchor="middle" x="435.5" y="-717.9" font-family="Helvetica,sans-Serif" font-size="12.00">abstract_send_protocol_simulator</text>
<polyline fill="none" stroke="black" points="283,-710.5 588,-710.5 "/>
<text text-anchor="start" x="291" y="-696.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::queue&lt; party_t &gt; to_send</text>
<text text-anchor="start" x="291" y="-683.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; bool(bool, party</text>
<text text-anchor="start" x="291" y="-670.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t, party_t)&gt; forward</text>
<polyline fill="none" stroke="black" points="283,-663.5 588,-663.5 "/>
<text text-anchor="start" x="291" y="-649.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ abstract_send_protocol_simulator</text>
<text text-anchor="start" x="291" y="-636.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::vector&lt; stake_t &gt; stakes, std</text>
<text text-anchor="start" x="291" y="-623.9" font-family="Helvetica,sans-Serif" font-size="12.00">::function&lt; bool(bool, party_t, party</text>
<text text-anchor="start" x="291" y="-610.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t)&gt; forward=[](bool first_time, party</text>
<text text-anchor="start" x="291" y="-597.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t sender, party_t receiver) { return first_time;})</text>
<text text-anchor="start" x="291" y="-584.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~abstract_send_protocol_simulator()</text>
<text text-anchor="start" x="291" y="-571.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual void set_sender(party_t</text>
<text text-anchor="start" x="291" y="-558.9" font-family="Helvetica,sans-Serif" font-size="12.00"> sender) override</text>
<text text-anchor="start" x="291" y="-545.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::vector&lt; party_t &gt; get</text>
<text text-anchor="start" x="291" y="-532.9" font-family="Helvetica,sans-Serif" font-size="12.00">_targets_to_send(party_t sender)=0</text>
<text text-anchor="start" x="291" y="-519.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="291" y="-506.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round() override</text>
</a>
</g>
</g>
<!-- Node4&#45;&gt;Node7 -->
<g id="edge7" class="edge">
<title>Node4&#45;&gt;Node7</title>
<path fill="none" stroke="midnightblue" d="M366.19,-758.99C370.65,-749.82 375.08,-740.71 379.42,-731.8"/>
<polygon fill="none" stroke="midnightblue" points="362.95,-757.65 361.73,-768.17 369.25,-760.71 362.95,-757.65"/>
</g>
<!-- Node5 -->
<g id="node5" class="node">
<title>Node5</title>
<g id="a_node5"><a xlink:href="../../da/d73/classprotocol__simulator.html" target="_top" xlink:title="Abstract class for protocol simulators.">
<polygon fill="white" stroke="black" points="150.5,-1128.5 150.5,-1438.5 416.5,-1438.5 416.5,-1128.5 150.5,-1128.5"/>
<text text-anchor="middle" x="283.5" y="-1424.9" font-family="Helvetica,sans-Serif" font-size="12.00">protocol_simulator</text>
<polyline fill="none" stroke="black" points="150.5,-1417.5 416.5,-1417.5 "/>
<text text-anchor="start" x="158.5" y="-1403.9" font-family="Helvetica,sans-Serif" font-size="12.00"># party_t nr_parties</text>
<text text-anchor="start" x="158.5" y="-1390.9" font-family="Helvetica,sans-Serif" font-size="12.00"># round_t curr_round</text>
<text text-anchor="start" x="158.5" y="-1377.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; counter_t &gt; nr_messages</text>
<text text-anchor="start" x="158.5" y="-1364.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; round_t &gt; got_msg</text>
<polyline fill="none" stroke="black" points="150.5,-1357.5 416.5,-1357.5 "/>
<text text-anchor="start" x="158.5" y="-1343.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ protocol_simulator(party_t nr_parties)</text>
<text text-anchor="start" x="158.5" y="-1330.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~protocol_simulator()</text>
<text text-anchor="start" x="158.5" y="-1317.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual round_t get_latency()</text>
<text text-anchor="start" x="158.5" y="-1304.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual party_t get_nr_parties(round_t r)</text>
<text text-anchor="start" x="158.5" y="-1291.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ party_t get_nr_parties()</text>
<text text-anchor="start" x="158.5" y="-1278.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool all_got_msg()</text>
<text text-anchor="start" x="158.5" y="-1265.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; round_t &gt; get_got_msg()</text>
<text text-anchor="start" x="158.5" y="-1252.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool receive(party_t receiver)</text>
<text text-anchor="start" x="158.5" y="-1239.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool has_received(party_t receiver)</text>
<text text-anchor="start" x="158.5" y="-1226.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual void set_sender(party_t sender)</text>
<text text-anchor="start" x="158.5" y="-1213.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual std::vector&lt; counter_t &gt;</text>
<text text-anchor="start" x="158.5" y="-1200.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_messages_per_round()</text>
<text text-anchor="start" x="158.5" y="-1187.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual counter_t get_nr_messages()</text>
<text text-anchor="start" x="158.5" y="-1174.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool execute_protocol(round</text>
<text text-anchor="start" x="158.5" y="-1161.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t bound=ROUND_T_MAX)</text>
<text text-anchor="start" x="158.5" y="-1148.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="158.5" y="-1135.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; round()=0</text>
</a>
</g>
</g>
<!-- Node5&#45;&gt;Node4 -->
<g id="edge4" class="edge">
<title>Node5&#45;&gt;Node4</title>
<path fill="none" stroke="midnightblue" d="M283.5,-1118.31C283.5,-1109.43 283.5,-1100.5 283.5,-1091.62"/>
<polygon fill="none" stroke="midnightblue" points="280,-1118.33 283.5,-1128.33 287,-1118.33 280,-1118.33"/>
</g>
<!-- Node6 -->
<g id="node6" class="node">
<title>Node6</title>
<g id="a_node6"><a xlink:href="../../df/d1d/classsend__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="300.5,-230.5 300.5,-436.5 554.5,-436.5 554.5,-230.5 300.5,-230.5"/>
<text text-anchor="middle" x="427.5" y="-422.9" font-family="Helvetica,sans-Serif" font-size="12.00">send_protocol_simulator</text>
<polyline fill="none" stroke="black" points="300.5,-415.5 554.5,-415.5 "/>
<text text-anchor="start" x="308.5" y="-401.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::mt19937_64 * re</text>
<text text-anchor="start" x="308.5" y="-388.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::uniform_real_distribution&lt;</text>
<text text-anchor="start" x="308.5" y="-375.9" font-family="Helvetica,sans-Serif" font-size="12.00"> double &gt; unif</text>
<text text-anchor="start" x="308.5" y="-362.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; double(party_t, party</text>
<text text-anchor="start" x="308.5" y="-349.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t)&gt; send_prob</text>
<polyline fill="none" stroke="black" points="300.5,-342.5 554.5,-342.5 "/>
<text text-anchor="start" x="308.5" y="-328.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ send_protocol_simulator(std::function</text>
<text text-anchor="start" x="308.5" y="-315.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; double(party_t, party_t)&gt; send_prob,</text>
<text text-anchor="start" x="308.5" y="-302.9" font-family="Helvetica,sans-Serif" font-size="12.00"> std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="308.5" y="-289.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~send_protocol_simulator()</text>
<text text-anchor="start" x="308.5" y="-276.9" font-family="Helvetica,sans-Serif" font-size="12.00"># bool send(party_t sender, party</text>
<text text-anchor="start" x="308.5" y="-263.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t receiver)</text>
<text text-anchor="start" x="308.5" y="-250.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::vector&lt; party_t &gt; get</text>
<text text-anchor="start" x="308.5" y="-237.9" font-family="Helvetica,sans-Serif" font-size="12.00">_targets_to_send(party_t sender)</text>
</a>
</g>
</g>
<!-- Node6&#45;&gt;Node1 -->
<g id="edge5" class="edge">
<title>Node6&#45;&gt;Node1</title>
<path fill="none" stroke="midnightblue" d="M362.94,-221.54C352.39,-203.41 341.63,-184.91 331.57,-167.62"/>
<polygon fill="none" stroke="midnightblue" points="360.04,-223.52 368.1,-230.4 366.09,-220 360.04,-223.52"/>
</g>
<!-- Node7&#45;&gt;Node6 -->
<g id="edge6" class="edge">
<title>Node7&#45;&gt;Node6</title>
<path fill="none" stroke="midnightblue" d="M431.92,-489.1C431.42,-471.54 430.9,-453.66 430.42,-436.6"/>
<polygon fill="none" stroke="midnightblue" points="428.43,-489.51 432.21,-499.4 435.42,-489.31 428.43,-489.51"/>
</g>
</g>
</svg>
