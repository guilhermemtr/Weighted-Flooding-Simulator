<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 5.0.0 (0)
 -->
<!-- Title: abstract_send_protocol_simulator Pages: 1 -->
<!--zoomable 1564 -->
<svg id="main" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" onload="init(evt)">
<style type="text/css"><![CDATA[
.edge:hover path { stroke: red; }
.edge:hover polygon { stroke: red; fill: red; }
]]></style>
<script type="text/javascript"><![CDATA[
var edges = document.getElementsByTagName('g');
if (edges && edges.length) {
  for (var i=0;i<edges.length;i++) {
    if (edges[i].id.substr(0,4)=='edge') {
      edges[i].setAttribute('class','edge');
    }
  }
}
]]></script>
        <defs>
                <circle id="rim" cx="0" cy="0" r="7"/>
                <circle id="rim2" cx="0" cy="0" r="3.5"/>
                <g id="zoomPlus">
                        <use xlink:href="#rim" fill="#404040">
                                <set attributeName="fill" to="#808080" begin="zoomplus.mouseover" end="zoomplus.mouseout"/>
                        </use>
                        <path d="M-4,0h8M0,-4v8" fill="none" stroke="white" stroke-width="1.5" pointer-events="none"/>
                </g>
                <g id="zoomMin">
                        <use xlink:href="#rim" fill="#404040">
                                <set attributeName="fill" to="#808080" begin="zoomminus.mouseover" end="zoomminus.mouseout"/>
                        </use>
                        <path d="M-4,0h8" fill="none" stroke="white" stroke-width="1.5" pointer-events="none"/>
                </g>
                <g id="dirArrow">
                        <path fill="none" stroke="white" stroke-width="1.5" d="M0,-3.0v7 M-2.5,-0.5L0,-3.0L2.5,-0.5"/>
                </g>
               <g id="resetDef">
                       <use xlink:href="#rim2" fill="#404040">
                               <set attributeName="fill" to="#808080" begin="reset.mouseover" end="reset.mouseout"/>
                       </use>
               </g>
        </defs>

<script type="text/javascript">
var viewWidth = 618;
var viewHeight = 1564;
var sectionId = 'dynsection-0';
</script>
<script xlink:href="../../svgpan.js"/>
<svg id="graph" class="graph">
<g id="viewport">
<title>abstract_send_protocol_simulator</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-1560 614,-1560 614,4 -4,4"/>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title=" ">
<polygon fill="#bfbfbf" stroke="black" points="154,-616.5 154,-848.5 459,-848.5 459,-616.5 154,-616.5"/>
<text text-anchor="middle" x="306.5" y="-834.9" font-family="Helvetica,sans-Serif" font-size="12.00">abstract_send_protocol_simulator</text>
<polyline fill="none" stroke="black" points="154,-827.5 459,-827.5 "/>
<text text-anchor="start" x="162" y="-813.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::queue&lt; party_t &gt; to_send</text>
<text text-anchor="start" x="162" y="-800.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; bool(bool, party</text>
<text text-anchor="start" x="162" y="-787.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t, party_t)&gt; forward</text>
<polyline fill="none" stroke="black" points="154,-780.5 459,-780.5 "/>
<text text-anchor="start" x="162" y="-766.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ abstract_send_protocol_simulator</text>
<text text-anchor="start" x="162" y="-753.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::vector&lt; stake_t &gt; stakes, std</text>
<text text-anchor="start" x="162" y="-740.9" font-family="Helvetica,sans-Serif" font-size="12.00">::function&lt; bool(bool, party_t, party</text>
<text text-anchor="start" x="162" y="-727.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t)&gt; forward=[](bool first_time, party</text>
<text text-anchor="start" x="162" y="-714.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t sender, party_t receiver) { return first_time;})</text>
<text text-anchor="start" x="162" y="-701.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~abstract_send_protocol_simulator()</text>
<text text-anchor="start" x="162" y="-688.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual void set_sender(party_t</text>
<text text-anchor="start" x="162" y="-675.9" font-family="Helvetica,sans-Serif" font-size="12.00"> sender) override</text>
<text text-anchor="start" x="162" y="-662.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::vector&lt; party_t &gt; get</text>
<text text-anchor="start" x="162" y="-649.9" font-family="Helvetica,sans-Serif" font-size="12.00">_targets_to_send(party_t sender)=0</text>
<text text-anchor="start" x="162" y="-636.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="162" y="-623.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round() override</text>
</a>
</g>
</g>
<!-- Node4 -->
<g id="node4" class="node">
<title>Node4</title>
<g id="a_node4"><a xlink:href="../../de/d66/classk__out__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="40,-256.5 40,-579.5 299,-579.5 299,-256.5 40,-256.5"/>
<text text-anchor="middle" x="169.5" y="-565.9" font-family="Helvetica,sans-Serif" font-size="12.00">k_out_protocol_simulator</text>
<polyline fill="none" stroke="black" points="40,-558.5 299,-558.5 "/>
<text text-anchor="start" x="48" y="-544.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::mt19937_64 * re</text>
<text text-anchor="start" x="48" y="-531.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="48" y="-518.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_targets</text>
<text text-anchor="start" x="48" y="-505.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="48" y="-492.9" font-family="Helvetica,sans-Serif" font-size="12.00"> imitation_function</text>
<text text-anchor="start" x="48" y="-479.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::list&lt; std::pair&lt; size_t, party</text>
<text text-anchor="start" x="48" y="-466.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t &gt; &gt; sample_domain</text>
<text text-anchor="start" x="48" y="-453.9" font-family="Helvetica,sans-Serif" font-size="12.00"># size_t total_imitated_nodes</text>
<text text-anchor="start" x="48" y="-440.9" font-family="Helvetica,sans-Serif" font-size="12.00"># size_t histogram_interval_size</text>
<text text-anchor="start" x="48" y="-427.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::map&lt; party_t, size_t &gt; histogram</text>
<polyline fill="none" stroke="black" points="40,-420.5 299,-420.5 "/>
<text text-anchor="start" x="48" y="-406.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ k_out_protocol_simulator(std::function</text>
<text text-anchor="start" x="48" y="-393.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; size_t(party_t)&gt; get_nr_targets, std</text>
<text text-anchor="start" x="48" y="-380.9" font-family="Helvetica,sans-Serif" font-size="12.00">::function&lt; size_t(party_t)&gt; imitation</text>
<text text-anchor="start" x="48" y="-367.9" font-family="Helvetica,sans-Serif" font-size="12.00">_function, std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="48" y="-354.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~k_out_protocol_simulator()</text>
<text text-anchor="start" x="48" y="-341.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="48" y="-328.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_get_nr_targets()</text>
<text text-anchor="start" x="48" y="-315.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="48" y="-302.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_imitation_function()</text>
<text text-anchor="start" x="48" y="-289.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool all_got_msg()</text>
<text text-anchor="start" x="48" y="-276.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; party_t &gt; get_targets</text>
<text text-anchor="start" x="48" y="-263.9" font-family="Helvetica,sans-Serif" font-size="12.00">_to_send(party_t sender)</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node4 -->
<g id="edge3" class="edge">
<title>Node1&#45;&gt;Node4</title>
<path fill="none" stroke="midnightblue" d="M251.97,-607.12C248.01,-598.09 243.99,-588.91 239.95,-579.71"/>
<polygon fill="none" stroke="midnightblue" points="248.85,-608.71 256.07,-616.47 255.26,-605.9 248.85,-608.71"/>
</g>
<!-- Node6 -->
<g id="node6" class="node">
<title>Node6</title>
<g id="a_node6"><a xlink:href="../../df/d1d/classsend__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="327.5,-315 327.5,-521 581.5,-521 581.5,-315 327.5,-315"/>
<text text-anchor="middle" x="454.5" y="-507.4" font-family="Helvetica,sans-Serif" font-size="12.00">send_protocol_simulator</text>
<polyline fill="none" stroke="black" points="327.5,-500 581.5,-500 "/>
<text text-anchor="start" x="335.5" y="-486.4" font-family="Helvetica,sans-Serif" font-size="12.00"># std::mt19937_64 * re</text>
<text text-anchor="start" x="335.5" y="-473.4" font-family="Helvetica,sans-Serif" font-size="12.00"># std::uniform_real_distribution&lt;</text>
<text text-anchor="start" x="335.5" y="-460.4" font-family="Helvetica,sans-Serif" font-size="12.00"> double &gt; unif</text>
<text text-anchor="start" x="335.5" y="-447.4" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; double(party_t, party</text>
<text text-anchor="start" x="335.5" y="-434.4" font-family="Helvetica,sans-Serif" font-size="12.00">_t)&gt; send_prob</text>
<polyline fill="none" stroke="black" points="327.5,-427 581.5,-427 "/>
<text text-anchor="start" x="335.5" y="-413.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ send_protocol_simulator(std::function</text>
<text text-anchor="start" x="335.5" y="-400.4" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; double(party_t, party_t)&gt; send_prob,</text>
<text text-anchor="start" x="335.5" y="-387.4" font-family="Helvetica,sans-Serif" font-size="12.00"> std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="335.5" y="-374.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~send_protocol_simulator()</text>
<text text-anchor="start" x="335.5" y="-361.4" font-family="Helvetica,sans-Serif" font-size="12.00"># bool send(party_t sender, party</text>
<text text-anchor="start" x="335.5" y="-348.4" font-family="Helvetica,sans-Serif" font-size="12.00">_t receiver)</text>
<text text-anchor="start" x="335.5" y="-335.4" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::vector&lt; party_t &gt; get</text>
<text text-anchor="start" x="335.5" y="-322.4" font-family="Helvetica,sans-Serif" font-size="12.00">_targets_to_send(party_t sender)</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node6 -->
<g id="edge5" class="edge">
<title>Node1&#45;&gt;Node6</title>
<path fill="none" stroke="midnightblue" d="M365.34,-607.25C378.87,-578.7 393.1,-548.65 406.12,-521.15"/>
<polygon fill="none" stroke="midnightblue" points="362.1,-605.93 360.98,-616.47 368.42,-608.93 362.1,-605.93"/>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:href="../../df/dcc/classcorruptions__stake__protocol__simulator.html" target="_top" xlink:title="Abstract class for protocol simulators with stake and corruptions.">
<polygon fill="white" stroke="black" points="164.5,-885.5 164.5,-1208.5 448.5,-1208.5 448.5,-885.5 164.5,-885.5"/>
<text text-anchor="middle" x="306.5" y="-1194.9" font-family="Helvetica,sans-Serif" font-size="12.00">corruptions_stake_protocol_simulator</text>
<polyline fill="none" stroke="black" points="164.5,-1187.5 448.5,-1187.5 "/>
<text text-anchor="start" x="172.5" y="-1173.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; stake_t &gt; stakes</text>
<text text-anchor="start" x="172.5" y="-1160.9" font-family="Helvetica,sans-Serif" font-size="12.00"># stake_t total_stake</text>
<text text-anchor="start" x="172.5" y="-1147.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; corruption_t &gt; corrupted</text>
<polyline fill="none" stroke="black" points="164.5,-1140.5 448.5,-1140.5 "/>
<text text-anchor="start" x="172.5" y="-1126.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ corruptions_stake_protocol_simulator</text>
<text text-anchor="start" x="172.5" y="-1113.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="172.5" y="-1100.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~corruptions_stake_protocol</text>
<text text-anchor="start" x="172.5" y="-1087.9" font-family="Helvetica,sans-Serif" font-size="12.00">_simulator()</text>
<text text-anchor="start" x="172.5" y="-1074.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; stake_t &gt; get_stakes()</text>
<text text-anchor="start" x="172.5" y="-1061.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ stake_t get_total_stake()</text>
<text text-anchor="start" x="172.5" y="-1048.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; corruption_t &gt; get</text>
<text text-anchor="start" x="172.5" y="-1035.9" font-family="Helvetica,sans-Serif" font-size="12.00">_corrupted()</text>
<text text-anchor="start" x="172.5" y="-1022.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ corruption_t is_corrupted(party_t i)</text>
<text text-anchor="start" x="172.5" y="-1009.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void corrupt_parties(std::vector</text>
<text text-anchor="start" x="172.5" y="-996.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; corruption_t &gt; corrupted)</text>
<text text-anchor="start" x="172.5" y="-983.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual round_t get_latency()</text>
<text text-anchor="start" x="172.5" y="-970.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool all_got_msg()</text>
<text text-anchor="start" x="172.5" y="-957.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual void adversary(party_t i,</text>
<text text-anchor="start" x="172.5" y="-944.9" font-family="Helvetica,sans-Serif" font-size="12.00"> adversary_phase phase)</text>
<text text-anchor="start" x="172.5" y="-931.9" font-family="Helvetica,sans-Serif" font-size="12.00"># party_t owner_of(stake_t c)</text>
<text text-anchor="start" x="172.5" y="-918.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool &gt; round()</text>
<text text-anchor="start" x="172.5" y="-905.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="172.5" y="-892.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round()=0</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node1 -->
<g id="edge1" class="edge">
<title>Node2&#45;&gt;Node1</title>
<path fill="none" stroke="midnightblue" d="M306.5,-875.13C306.5,-866.25 306.5,-857.43 306.5,-848.8"/>
<polygon fill="none" stroke="midnightblue" points="303,-875.17 306.5,-885.17 310,-875.17 303,-875.17"/>
</g>
<!-- Node3 -->
<g id="node3" class="node">
<title>Node3</title>
<g id="a_node3"><a xlink:href="../../da/d73/classprotocol__simulator.html" target="_top" xlink:title="Abstract class for protocol simulators.">
<polygon fill="white" stroke="black" points="173.5,-1245.5 173.5,-1555.5 439.5,-1555.5 439.5,-1245.5 173.5,-1245.5"/>
<text text-anchor="middle" x="306.5" y="-1541.9" font-family="Helvetica,sans-Serif" font-size="12.00">protocol_simulator</text>
<polyline fill="none" stroke="black" points="173.5,-1534.5 439.5,-1534.5 "/>
<text text-anchor="start" x="181.5" y="-1520.9" font-family="Helvetica,sans-Serif" font-size="12.00"># party_t nr_parties</text>
<text text-anchor="start" x="181.5" y="-1507.9" font-family="Helvetica,sans-Serif" font-size="12.00"># round_t curr_round</text>
<text text-anchor="start" x="181.5" y="-1494.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; counter_t &gt; nr_messages</text>
<text text-anchor="start" x="181.5" y="-1481.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; round_t &gt; got_msg</text>
<polyline fill="none" stroke="black" points="173.5,-1474.5 439.5,-1474.5 "/>
<text text-anchor="start" x="181.5" y="-1460.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ protocol_simulator(party_t nr_parties)</text>
<text text-anchor="start" x="181.5" y="-1447.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~protocol_simulator()</text>
<text text-anchor="start" x="181.5" y="-1434.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual round_t get_latency()</text>
<text text-anchor="start" x="181.5" y="-1421.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual party_t get_nr_parties(round_t r)</text>
<text text-anchor="start" x="181.5" y="-1408.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ party_t get_nr_parties()</text>
<text text-anchor="start" x="181.5" y="-1395.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool all_got_msg()</text>
<text text-anchor="start" x="181.5" y="-1382.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; round_t &gt; get_got_msg()</text>
<text text-anchor="start" x="181.5" y="-1369.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool receive(party_t receiver)</text>
<text text-anchor="start" x="181.5" y="-1356.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool has_received(party_t receiver)</text>
<text text-anchor="start" x="181.5" y="-1343.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual void set_sender(party_t sender)</text>
<text text-anchor="start" x="181.5" y="-1330.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual std::vector&lt; counter_t &gt;</text>
<text text-anchor="start" x="181.5" y="-1317.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_messages_per_round()</text>
<text text-anchor="start" x="181.5" y="-1304.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual counter_t get_nr_messages()</text>
<text text-anchor="start" x="181.5" y="-1291.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool execute_protocol(round</text>
<text text-anchor="start" x="181.5" y="-1278.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t bound=ROUND_T_MAX)</text>
<text text-anchor="start" x="181.5" y="-1265.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="181.5" y="-1252.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; round()=0</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node2 -->
<g id="edge2" class="edge">
<title>Node3&#45;&gt;Node2</title>
<path fill="none" stroke="midnightblue" d="M306.5,-1235.31C306.5,-1226.43 306.5,-1217.5 306.5,-1208.62"/>
<polygon fill="none" stroke="midnightblue" points="303,-1235.33 306.5,-1245.33 310,-1235.33 303,-1235.33"/>
</g>
<!-- Node5 -->
<g id="node5" class="node">
<title>Node5</title>
<g id="a_node5"><a xlink:href="../../d7/d76/classhybrid__k__out__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="0,-0.5 0,-219.5 301,-219.5 301,-0.5 0,-0.5"/>
<text text-anchor="middle" x="150.5" y="-205.9" font-family="Helvetica,sans-Serif" font-size="12.00">hybrid_k_out_protocol_simulator</text>
<polyline fill="none" stroke="black" points="0,-198.5 301,-198.5 "/>
<text text-anchor="start" x="8" y="-184.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="8" y="-171.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_requests</text>
<text text-anchor="start" x="8" y="-158.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="8" y="-145.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_requests_to_handle</text>
<polyline fill="none" stroke="black" points="0,-138.5 301,-138.5 "/>
<text text-anchor="start" x="8" y="-124.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ hybrid_k_out_protocol_simulator</text>
<text text-anchor="start" x="8" y="-111.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="8" y="-98.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_targets, std::function&lt; size</text>
<text text-anchor="start" x="8" y="-85.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t(party_t)&gt; imitation_function, std</text>
<text text-anchor="start" x="8" y="-72.9" font-family="Helvetica,sans-Serif" font-size="12.00">::function&lt; size_t(party_t)&gt; get_nr_requests,</text>
<text text-anchor="start" x="8" y="-59.9" font-family="Helvetica,sans-Serif" font-size="12.00"> std::function&lt; size_t(party_t)&gt; get_nr_requests</text>
<text text-anchor="start" x="8" y="-46.9" font-family="Helvetica,sans-Serif" font-size="12.00">_to_handle, std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="8" y="-33.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~hybrid_k_out_protocol_simulator()</text>
<text text-anchor="start" x="8" y="-20.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="8" y="-7.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round() override</text>
</a>
</g>
</g>
<!-- Node4&#45;&gt;Node5 -->
<g id="edge4" class="edge">
<title>Node4&#45;&gt;Node5</title>
<path fill="none" stroke="midnightblue" d="M158.9,-246.22C158.34,-237.25 157.79,-228.36 157.25,-219.68"/>
<polygon fill="none" stroke="midnightblue" points="155.41,-246.62 159.53,-256.38 162.4,-246.18 155.41,-246.62"/>
</g>
<!-- Node7 -->
<g id="node7" class="node">
<title>Node7</title>
<g id="a_node7"><a xlink:href="../../d0/d86/classhybrid__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="319,-26.5 319,-193.5 610,-193.5 610,-26.5 319,-26.5"/>
<text text-anchor="middle" x="464.5" y="-179.9" font-family="Helvetica,sans-Serif" font-size="12.00">hybrid_protocol_simulator</text>
<polyline fill="none" stroke="black" points="319,-172.5 610,-172.5 "/>
<text text-anchor="middle" x="464.5" y="-158.9" font-family="Helvetica,sans-Serif" font-size="12.00"> </text>
<polyline fill="none" stroke="black" points="319,-151.5 610,-151.5 "/>
<text text-anchor="start" x="327" y="-137.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ hybrid_protocol_simulator(std::</text>
<text text-anchor="start" x="327" y="-124.9" font-family="Helvetica,sans-Serif" font-size="12.00">function&lt; double(party_t, party_t)</text>
<text text-anchor="start" x="327" y="-111.9" font-family="Helvetica,sans-Serif" font-size="12.00">&gt; send_prob, std::function&lt; size_t</text>
<text text-anchor="start" x="327" y="-98.9" font-family="Helvetica,sans-Serif" font-size="12.00">(party_t)&gt; get_nr_requests, std::function</text>
<text text-anchor="start" x="327" y="-85.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; size_t(party_t)&gt; get_nr_requests_to_handle,</text>
<text text-anchor="start" x="327" y="-72.9" font-family="Helvetica,sans-Serif" font-size="12.00"> std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="327" y="-59.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~hybrid_protocol_simulator()</text>
<text text-anchor="start" x="327" y="-46.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="327" y="-33.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round() override</text>
</a>
</g>
</g>
<!-- Node6&#45;&gt;Node7 -->
<g id="edge6" class="edge">
<title>Node6&#45;&gt;Node7</title>
<path fill="none" stroke="midnightblue" d="M458.18,-304.45C459.37,-267.86 460.68,-227.93 461.79,-193.9"/>
<polygon fill="none" stroke="midnightblue" points="454.67,-304.57 457.84,-314.68 461.67,-304.8 454.67,-304.57"/>
</g>
</g>
</svg>
        <g id="navigator" transform="translate(0 0)" fill="#404254">
                <rect fill="#f2f5e9" fill-opacity="0.5" stroke="#606060" stroke-width=".5" x="0" y="0" width="60" height="60"/>
                <use id="zoomplus" xlink:href="#zoomPlus" x="17" y="9" onmousedown="handleZoom(evt,'in')"/>
                <use id="zoomminus" xlink:href="#zoomMin" x="42" y="9" onmousedown="handleZoom(evt,'out')"/>
                <use id="reset" xlink:href="#resetDef" x="30" y="36" onmousedown="handleReset()"/>
                <g id="arrowUp" xlink:href="#dirArrow" transform="translate(30 24)" onmousedown="handlePan(0,-1)">
                  <use xlink:href="#rim" fill="#404040">
                        <set attributeName="fill" to="#808080" begin="arrowUp.mouseover" end="arrowUp.mouseout"/>
                  </use>
                  <path fill="none" stroke="white" stroke-width="1.5" d="M0,-3.0v7 M-2.5,-0.5L0,-3.0L2.5,-0.5"/>
                </g>
                <g id="arrowRight" xlink:href="#dirArrow" transform="rotate(90) translate(36 -43)" onmousedown="handlePan(1,0)">
                  <use xlink:href="#rim" fill="#404040">
                        <set attributeName="fill" to="#808080" begin="arrowRight.mouseover" end="arrowRight.mouseout"/>
                  </use>
                  <path fill="none" stroke="white" stroke-width="1.5" d="M0,-3.0v7 M-2.5,-0.5L0,-3.0L2.5,-0.5"/>
                </g>
                <g id="arrowDown" xlink:href="#dirArrow" transform="rotate(180) translate(-30 -48)" onmousedown="handlePan(0,1)">
                  <use xlink:href="#rim" fill="#404040">
                        <set attributeName="fill" to="#808080" begin="arrowDown.mouseover" end="arrowDown.mouseout"/>
                  </use>
                  <path fill="none" stroke="white" stroke-width="1.5" d="M0,-3.0v7 M-2.5,-0.5L0,-3.0L2.5,-0.5"/>
                </g>
                <g id="arrowLeft" xlink:href="#dirArrow" transform="rotate(270) translate(-36 17)" onmousedown="handlePan(-1,0)">
                  <use xlink:href="#rim" fill="#404040">
                        <set attributeName="fill" to="#808080" begin="arrowLeft.mouseover" end="arrowLeft.mouseout"/>
                  </use>
                  <path fill="none" stroke="white" stroke-width="1.5" d="M0,-3.0v7 M-2.5,-0.5L0,-3.0L2.5,-0.5"/>
                </g>
        </g>
        <svg viewBox="0 0 15 15" width="100%" height="30px" preserveAspectRatio="xMaxYMin meet">
         <g id="arrow_out" transform="scale(0.3 0.3)">
          <a xlink:href="classabstract__send__protocol__simulator__inherit__graph_org.svg" target="_base">
           <rect id="button" ry="5" rx="5" y="6" x="6" height="38" width="38"
                fill="#f2f5e9" fill-opacity="0.5" stroke="#606060" stroke-width="1.0"/>
           <path id="arrow"
             d="M 11.500037,31.436501 C 11.940474,20.09759 22.043105,11.32322 32.158766,21.979434 L 37.068811,17.246167 C 37.068811,17.246167 37.088388,32 37.088388,32 L 22.160133,31.978069 C 22.160133,31.978069 26.997745,27.140456 26.997745,27.140456 C 18.528582,18.264221 13.291696,25.230495 11.500037,31.436501 z"
             style="fill:#404040;"/>
          </a>
         </g>
        </svg>
</svg>
