<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 5.0.0 (0)
 -->
<!-- Title: abstract_receive_protocol_simulator Pages: 1 -->
<svg width="618pt" height="1447pt"
 viewBox="0.00 0.00 618.00 1447.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1443)">
<title>abstract_receive_protocol_simulator</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-1443 614,-1443 614,4 -4,4"/>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title=" ">
<polygon fill="#bfbfbf" stroke="black" points="175,-512.5 175,-731.5 440,-731.5 440,-512.5 175,-512.5"/>
<text text-anchor="middle" x="307.5" y="-717.9" font-family="Helvetica,sans-Serif" font-size="12.00">abstract_receive_protocol_simulator</text>
<polyline fill="none" stroke="black" points="175,-710.5 440,-710.5 "/>
<text text-anchor="start" x="183" y="-696.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; std::vector&lt; party</text>
<text text-anchor="start" x="183" y="-683.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t &gt; &gt; requesters</text>
<polyline fill="none" stroke="black" points="175,-676.5 440,-676.5 "/>
<text text-anchor="start" x="183" y="-662.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ abstract_receive_protocol_simulator</text>
<text text-anchor="start" x="183" y="-649.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="183" y="-636.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~abstract_receive_protocol_simulator()</text>
<text text-anchor="start" x="183" y="-623.9" font-family="Helvetica,sans-Serif" font-size="12.00"># counter_t handle_all_requests()</text>
<text text-anchor="start" x="183" y="-610.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual counter_t handle_requests</text>
<text text-anchor="start" x="183" y="-597.9" font-family="Helvetica,sans-Serif" font-size="12.00">(party_t i)=0</text>
<text text-anchor="start" x="183" y="-584.9" font-family="Helvetica,sans-Serif" font-size="12.00"># counter_t request(party_t requester)</text>
<text text-anchor="start" x="183" y="-571.9" font-family="Helvetica,sans-Serif" font-size="12.00"># counter_t make_requests()</text>
<text text-anchor="start" x="183" y="-558.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::vector&lt; party_t &gt; get</text>
<text text-anchor="start" x="183" y="-545.9" font-family="Helvetica,sans-Serif" font-size="12.00">_request_targets(party_t requester)=0</text>
<text text-anchor="start" x="183" y="-532.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="183" y="-519.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round() override</text>
</a>
</g>
</g>
<!-- Node4 -->
<g id="node4" class="node">
<title>Node4</title>
<g id="a_node4"><a xlink:href="../../d2/d21/classreceiver__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="180,-217.5 180,-475.5 435,-475.5 435,-217.5 180,-217.5"/>
<text text-anchor="middle" x="307.5" y="-461.9" font-family="Helvetica,sans-Serif" font-size="12.00">receiver_protocol_simulator</text>
<polyline fill="none" stroke="black" points="180,-454.5 435,-454.5 "/>
<text text-anchor="start" x="188" y="-440.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::mt19937_64 * re</text>
<text text-anchor="start" x="188" y="-427.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::uniform_int_distribution&lt; party</text>
<text text-anchor="start" x="188" y="-414.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t &gt; unif_coin</text>
<text text-anchor="start" x="188" y="-401.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="188" y="-388.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_requests</text>
<text text-anchor="start" x="188" y="-375.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="188" y="-362.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_requests_to_handle</text>
<polyline fill="none" stroke="black" points="180,-355.5 435,-355.5 "/>
<text text-anchor="start" x="188" y="-341.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ receiver_protocol_simulator(std</text>
<text text-anchor="start" x="188" y="-328.9" font-family="Helvetica,sans-Serif" font-size="12.00">::function&lt; size_t(party_t)&gt; get</text>
<text text-anchor="start" x="188" y="-315.9" font-family="Helvetica,sans-Serif" font-size="12.00">_nr_requests, std::function&lt; size</text>
<text text-anchor="start" x="188" y="-302.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t(party_t)&gt; get_nr_requests_to_handle,</text>
<text text-anchor="start" x="188" y="-289.9" font-family="Helvetica,sans-Serif" font-size="12.00"> std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="188" y="-276.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~receiver_protocol_simulator()</text>
<text text-anchor="start" x="188" y="-263.9" font-family="Helvetica,sans-Serif" font-size="12.00"># party_t request(party_t requester)</text>
<text text-anchor="start" x="188" y="-250.9" font-family="Helvetica,sans-Serif" font-size="12.00"># counter_t handle_requests(party_t i)</text>
<text text-anchor="start" x="188" y="-237.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; party_t &gt; get_request</text>
<text text-anchor="start" x="188" y="-224.9" font-family="Helvetica,sans-Serif" font-size="12.00">_targets(party_t requester)</text>
</a>
</g>
</g>
<!-- Node1&#45;&gt;Node4 -->
<g id="edge3" class="edge">
<title>Node1&#45;&gt;Node4</title>
<path fill="none" stroke="midnightblue" d="M307.5,-502C307.5,-493.34 307.5,-484.58 307.5,-475.87"/>
<polygon fill="none" stroke="midnightblue" points="304,-502.12 307.5,-512.12 311,-502.12 304,-502.12"/>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:href="../../df/dcc/classcorruptions__stake__protocol__simulator.html" target="_top" xlink:title="Abstract class for protocol simulators with stake and corruptions.">
<polygon fill="white" stroke="black" points="165.5,-768.5 165.5,-1091.5 449.5,-1091.5 449.5,-768.5 165.5,-768.5"/>
<text text-anchor="middle" x="307.5" y="-1077.9" font-family="Helvetica,sans-Serif" font-size="12.00">corruptions_stake_protocol_simulator</text>
<polyline fill="none" stroke="black" points="165.5,-1070.5 449.5,-1070.5 "/>
<text text-anchor="start" x="173.5" y="-1056.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; stake_t &gt; stakes</text>
<text text-anchor="start" x="173.5" y="-1043.9" font-family="Helvetica,sans-Serif" font-size="12.00"># stake_t total_stake</text>
<text text-anchor="start" x="173.5" y="-1030.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; corruption_t &gt; corrupted</text>
<polyline fill="none" stroke="black" points="165.5,-1023.5 449.5,-1023.5 "/>
<text text-anchor="start" x="173.5" y="-1009.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ corruptions_stake_protocol_simulator</text>
<text text-anchor="start" x="173.5" y="-996.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="173.5" y="-983.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~corruptions_stake_protocol</text>
<text text-anchor="start" x="173.5" y="-970.9" font-family="Helvetica,sans-Serif" font-size="12.00">_simulator()</text>
<text text-anchor="start" x="173.5" y="-957.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; stake_t &gt; get_stakes()</text>
<text text-anchor="start" x="173.5" y="-944.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ stake_t get_total_stake()</text>
<text text-anchor="start" x="173.5" y="-931.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; corruption_t &gt; get</text>
<text text-anchor="start" x="173.5" y="-918.9" font-family="Helvetica,sans-Serif" font-size="12.00">_corrupted()</text>
<text text-anchor="start" x="173.5" y="-905.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ corruption_t is_corrupted(party_t i)</text>
<text text-anchor="start" x="173.5" y="-892.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ void corrupt_parties(std::vector</text>
<text text-anchor="start" x="173.5" y="-879.9" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; corruption_t &gt; corrupted)</text>
<text text-anchor="start" x="173.5" y="-866.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual round_t get_latency()</text>
<text text-anchor="start" x="173.5" y="-853.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool all_got_msg()</text>
<text text-anchor="start" x="173.5" y="-840.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual void adversary(party_t i,</text>
<text text-anchor="start" x="173.5" y="-827.9" font-family="Helvetica,sans-Serif" font-size="12.00"> adversary_phase phase)</text>
<text text-anchor="start" x="173.5" y="-814.9" font-family="Helvetica,sans-Serif" font-size="12.00"># party_t owner_of(stake_t c)</text>
<text text-anchor="start" x="173.5" y="-801.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool &gt; round()</text>
<text text-anchor="start" x="173.5" y="-788.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="173.5" y="-775.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round()=0</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node1 -->
<g id="edge1" class="edge">
<title>Node2&#45;&gt;Node1</title>
<path fill="none" stroke="midnightblue" d="M307.5,-758.22C307.5,-749.25 307.5,-740.36 307.5,-731.68"/>
<polygon fill="none" stroke="midnightblue" points="304,-758.38 307.5,-768.38 311,-758.38 304,-758.38"/>
</g>
<!-- Node3 -->
<g id="node3" class="node">
<title>Node3</title>
<g id="a_node3"><a xlink:href="../../da/d73/classprotocol__simulator.html" target="_top" xlink:title="Abstract class for protocol simulators.">
<polygon fill="white" stroke="black" points="174.5,-1128.5 174.5,-1438.5 440.5,-1438.5 440.5,-1128.5 174.5,-1128.5"/>
<text text-anchor="middle" x="307.5" y="-1424.9" font-family="Helvetica,sans-Serif" font-size="12.00">protocol_simulator</text>
<polyline fill="none" stroke="black" points="174.5,-1417.5 440.5,-1417.5 "/>
<text text-anchor="start" x="182.5" y="-1403.9" font-family="Helvetica,sans-Serif" font-size="12.00"># party_t nr_parties</text>
<text text-anchor="start" x="182.5" y="-1390.9" font-family="Helvetica,sans-Serif" font-size="12.00"># round_t curr_round</text>
<text text-anchor="start" x="182.5" y="-1377.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; counter_t &gt; nr_messages</text>
<text text-anchor="start" x="182.5" y="-1364.9" font-family="Helvetica,sans-Serif" font-size="12.00"># std::vector&lt; round_t &gt; got_msg</text>
<polyline fill="none" stroke="black" points="174.5,-1357.5 440.5,-1357.5 "/>
<text text-anchor="start" x="182.5" y="-1343.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ protocol_simulator(party_t nr_parties)</text>
<text text-anchor="start" x="182.5" y="-1330.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~protocol_simulator()</text>
<text text-anchor="start" x="182.5" y="-1317.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual round_t get_latency()</text>
<text text-anchor="start" x="182.5" y="-1304.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual party_t get_nr_parties(round_t r)</text>
<text text-anchor="start" x="182.5" y="-1291.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ party_t get_nr_parties()</text>
<text text-anchor="start" x="182.5" y="-1278.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool all_got_msg()</text>
<text text-anchor="start" x="182.5" y="-1265.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ std::vector&lt; round_t &gt; get_got_msg()</text>
<text text-anchor="start" x="182.5" y="-1252.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool receive(party_t receiver)</text>
<text text-anchor="start" x="182.5" y="-1239.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ bool has_received(party_t receiver)</text>
<text text-anchor="start" x="182.5" y="-1226.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual void set_sender(party_t sender)</text>
<text text-anchor="start" x="182.5" y="-1213.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual std::vector&lt; counter_t &gt;</text>
<text text-anchor="start" x="182.5" y="-1200.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_messages_per_round()</text>
<text text-anchor="start" x="182.5" y="-1187.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual counter_t get_nr_messages()</text>
<text text-anchor="start" x="182.5" y="-1174.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual bool execute_protocol(round</text>
<text text-anchor="start" x="182.5" y="-1161.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t bound=ROUND_T_MAX)</text>
<text text-anchor="start" x="182.5" y="-1148.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="182.5" y="-1135.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; round()=0</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node2 -->
<g id="edge2" class="edge">
<title>Node3&#45;&gt;Node2</title>
<path fill="none" stroke="midnightblue" d="M307.5,-1118.31C307.5,-1109.43 307.5,-1100.5 307.5,-1091.62"/>
<polygon fill="none" stroke="midnightblue" points="304,-1118.33 307.5,-1128.33 311,-1118.33 304,-1118.33"/>
</g>
<!-- Node5 -->
<g id="node5" class="node">
<title>Node5</title>
<g id="a_node5"><a xlink:href="../../d7/d76/classhybrid__k__out__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="0,-0.5 0,-180.5 301,-180.5 301,-0.5 0,-0.5"/>
<text text-anchor="middle" x="150.5" y="-166.9" font-family="Helvetica,sans-Serif" font-size="12.00">hybrid_k_out_protocol_simulator</text>
<polyline fill="none" stroke="black" points="0,-159.5 301,-159.5 "/>
<text text-anchor="middle" x="150.5" y="-145.9" font-family="Helvetica,sans-Serif" font-size="12.00"> </text>
<polyline fill="none" stroke="black" points="0,-138.5 301,-138.5 "/>
<text text-anchor="start" x="8" y="-124.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ hybrid_k_out_protocol_simulator</text>
<text text-anchor="start" x="8" y="-111.9" font-family="Helvetica,sans-Serif" font-size="12.00">(std::function&lt; size_t(party_t)&gt;</text>
<text text-anchor="start" x="8" y="-98.9" font-family="Helvetica,sans-Serif" font-size="12.00"> get_nr_targets, std::function&lt; size</text>
<text text-anchor="start" x="8" y="-85.9" font-family="Helvetica,sans-Serif" font-size="12.00">_t(party_t)&gt; imitation_function, std</text>
<text text-anchor="start" x="8" y="-72.9" font-family="Helvetica,sans-Serif" font-size="12.00">::function&lt; size_t(party_t)&gt; get_nr_requests,</text>
<text text-anchor="start" x="8" y="-59.9" font-family="Helvetica,sans-Serif" font-size="12.00"> std::function&lt; size_t(party_t)&gt; get_nr_requests</text>
<text text-anchor="start" x="8" y="-46.9" font-family="Helvetica,sans-Serif" font-size="12.00">_to_handle, std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="8" y="-33.9" font-family="Helvetica,sans-Serif" font-size="12.00">+ virtual ~hybrid_k_out_protocol_simulator()</text>
<text text-anchor="start" x="8" y="-20.9" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="8" y="-7.9" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round() override</text>
</a>
</g>
</g>
<!-- Node4&#45;&gt;Node5 -->
<g id="edge4" class="edge">
<title>Node4&#45;&gt;Node5</title>
<path fill="none" stroke="midnightblue" d="M222.9,-208.64C217.03,-199.13 211.19,-189.69 205.54,-180.55"/>
<polygon fill="none" stroke="midnightblue" points="220.08,-210.72 228.31,-217.38 226.03,-207.04 220.08,-210.72"/>
</g>
<!-- Node6 -->
<g id="node6" class="node">
<title>Node6</title>
<g id="a_node6"><a xlink:href="../../d0/d86/classhybrid__protocol__simulator.html" target="_top" xlink:title=" ">
<polygon fill="white" stroke="black" points="319,-7 319,-174 610,-174 610,-7 319,-7"/>
<text text-anchor="middle" x="464.5" y="-160.4" font-family="Helvetica,sans-Serif" font-size="12.00">hybrid_protocol_simulator</text>
<polyline fill="none" stroke="black" points="319,-153 610,-153 "/>
<text text-anchor="middle" x="464.5" y="-139.4" font-family="Helvetica,sans-Serif" font-size="12.00"> </text>
<polyline fill="none" stroke="black" points="319,-132 610,-132 "/>
<text text-anchor="start" x="327" y="-118.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ hybrid_protocol_simulator(std::</text>
<text text-anchor="start" x="327" y="-105.4" font-family="Helvetica,sans-Serif" font-size="12.00">function&lt; double(party_t, party_t)</text>
<text text-anchor="start" x="327" y="-92.4" font-family="Helvetica,sans-Serif" font-size="12.00">&gt; send_prob, std::function&lt; size_t</text>
<text text-anchor="start" x="327" y="-79.4" font-family="Helvetica,sans-Serif" font-size="12.00">(party_t)&gt; get_nr_requests, std::function</text>
<text text-anchor="start" x="327" y="-66.4" font-family="Helvetica,sans-Serif" font-size="12.00">&lt; size_t(party_t)&gt; get_nr_requests_to_handle,</text>
<text text-anchor="start" x="327" y="-53.4" font-family="Helvetica,sans-Serif" font-size="12.00"> std::vector&lt; stake_t &gt; stakes)</text>
<text text-anchor="start" x="327" y="-40.4" font-family="Helvetica,sans-Serif" font-size="12.00">+ ~hybrid_protocol_simulator()</text>
<text text-anchor="start" x="327" y="-27.4" font-family="Helvetica,sans-Serif" font-size="12.00"># virtual std::pair&lt; counter_t, bool</text>
<text text-anchor="start" x="327" y="-14.4" font-family="Helvetica,sans-Serif" font-size="12.00"> &gt; protocol_round() override</text>
</a>
</g>
</g>
<!-- Node4&#45;&gt;Node6 -->
<g id="edge5" class="edge">
<title>Node4&#45;&gt;Node6</title>
<path fill="none" stroke="midnightblue" d="M392,-208.8C399.28,-197.02 406.49,-185.36 413.38,-174.21"/>
<polygon fill="none" stroke="midnightblue" points="388.97,-207.04 386.69,-217.38 394.92,-210.72 388.97,-207.04"/>
</g>
</g>
</svg>
